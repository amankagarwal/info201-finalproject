<<<<<<< HEAD
library("dplyr")
library("stringi")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Need a way so that I can change all string values in a dataframe to lowercase.
league.data$blueMiddle = tolower(league.data$blueMiddle)
league.data$redMiddle = tolower(league.data$redMiddle)
# Use a user-defined function to get a dataframe which has all player names by role
blue.mid <- data.frame(league.data$blueMiddle) %>%
select(mid = league.data.blueMiddle)
red.mid <- data.frame(league.data$redMiddle) %>%
select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
getwd()
setwd("~/Desktop/Assignments/info201-finalproject/")
library("dplyr")
library("stringi")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Need a way so that I can change all string values in a dataframe to lowercase.
league.data$blueMiddle = tolower(league.data$blueMiddle)
league.data$redMiddle = tolower(league.data$redMiddle)
# Use a user-defined function to get a dataframe which has all player names by role
blue.mid <- data.frame(league.data$blueMiddle) %>%
select(mid = league.data.blueMiddle)
red.mid <- data.frame(league.data$redMiddle) %>%
select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
View(mid.players)
mid.players$mid
View(league.data)
test <- league.data %>%
group_by(blueMiddle) %>%
summarise(winrate = sum(bResult) / nrow())
test <- league.data %>%
group_by(blueMiddle) %>%
summarise(winrate = sum(bResult))
test <- league.data %>%
group_by(blueMiddle) %>%
summarise(winrate = sum(bResult) / n())
View(test)
test <- league.data %>%
group_by(blueMiddle) %>%
summarise(winrate = (sum(bResult) / n()) * 100)
View(test)
test <- league.data %>%
group_by(blueMiddle) %>%
summarise(winrate = (sum(bResult) / n()) * 100) %>%
arrange(blueMiddle)
View(test)
test <- league.data %>%
group_by(blueMiddle) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
arrange(blueMiddle)
test2 <- league.data %>%
group_by(redMiddle) %>%
summarise(winrate.red = (sum(rResult) / n()) * 100) %>%
arrange(redMiddle)
View(test2)
blue.winrate <- function(role) {
test <- league.data %>%
group_by_(role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
arrange_(role)
return (test)
}
function.test <- blue.winrate("blueMiddle")
View(function.test)
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
arrange_(blue.role)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = (sum(rResult) / n()) * 100) %>%
arrange_(red.role)
return (left_join(blue, red))
}
function.test <- blue.winrate("Middle")
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
arrange_(blue.role)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = (sum(rResult) / n()) * 100) %>%
arrange_(red.role)
return (left_join(blue, red))
}
function.test <- blue.winrate("Middle")
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
arrange_(blue.role)
return (blue)
}
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
arrange_(blue.role)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = (sum(rResult) / n()) * 100) %>%
arrange_(red.role)
return (left_join(blue, red))
}
function.test <- winrate.by.role("Middle")
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
=======
shiny::runApp('Desktop/Assignments/info201-finalproject')
library("dplyr")
library("snakecase")
library("plotly")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
<<<<<<< HEAD
summarise(winrate.red = (sum(rResult) / n()) * 100) %>%
=======
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
function.test <- winrate.by.role("Middle")
View(function.test)
league.data <- league.data %>%
mutate_if(is.string, funs(tolower(.)))
league.data <- league.data %>%
mutate_if(is.Character, funs(tolower(.)))
league.data <- league.data %>%
mutate_if(is.character, funs(tolower(.)))
View(league.data)
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
sapply(league.data, simpleCap)
install.packages("snakecase")
library("dplyr")
library("snakecase")
library("stringi")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making
league.data <- league.data %>%
mutate_if(is.character, funs(to_any_case(., case = "big_camel", postprocess = " ")))
# Making
league.data <- league.data %>%
mutate_if(is.character, to_any_case(., case = "big_camel", postprocess = " "))
library("stringr")
# Making
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
View(league.data)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = (sum(bResult) / n()) * 100) %>%
=======
# Testing the winrate.by.role function for Mid lane ->
function()
winrates.top <- winrateRole("Top")
winrates.jungle <- winrateRole("Jungle")
winrates.mid <- winrateRole("Middle")
winrates.adc <- winrateRole("ADC")
winrates.support <- winrateRole("Support")
# Plot a stacked bar chart (dont differentiate between blue and red)
winrates <- c()
runApp('Desktop/Assignments/info201-finalproject')
install.packages("snakecase")
install.packages("snakecase")
library("shiny")
library("shinythemes")
source("scripts/win-rate-comparison.R")
shinyUI <- fluidPage(title = "League Analysis", theme = shinytheme("spacelab"),
mainPanel(
navbarPage(strong("League of Legends"),
tabPanel("Overview"),
tabPanel("Player Win Rates",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "role",
label = "Choose a role:",
choice = c("Top", "Jungle","Middle", "ADC", "Support",
selected = "Middle")),
uiOutput("firstdropdown"),
uiOutput("seconddropdown")
),
mainPanel(
plotlyOutput("winrateplot")
)
)
),
tabPanel("Sid"),
tabPanel("Sid&Aman"),
tabPanel("Contact us- Mahir"))
)
)
library("shiny")
library("dplyr")
library("plotly")
source("scripts/win-rate-comparison.R")
shinyServer <- function(input, output) {
# All of this is for the win rate tab
output$firstdropdown <- renderUI({
selectizeInput("player1", label = "Choose Player 1:", choices = winrateRole(input$role)$player,
selected = NULL, multiple = FALSE, options = NULL)
})
output$seconddropdown <- renderUI({
all.choices <- winrateRole(input$role)$player
without.player1 <- all.choices[which(all.choices != input$player1)]
selectizeInput("player2", label = "Choose Player 2:", choices = without.player1,
selected = NULL, multiple = FALSE, options = NULL)
})
output$winrateplot <- renderPlotly({
tmp <- winrateRole(input$role)
players <- c(input$player1, input$player2)
tmp <- tmp %>%
filter(player %in% players) %>%
select(Player = player, Blue = winrate.blue, Red = winrate.red)
winrates <- c(tmp$Blue, tmp$Red)
plot_ly(data = tmp, x = ~Player, y = ~Blue, type = 'bar', name = "Blue side") %>%
add_trace(y = ~Red, name = "Red side") %>%
layout(title = paste0(input$player1, " vs ", input$player2, " Winrate Comparison"),
yaxis = list(title = "Winrate"), barmode = 'stack')
})
}
runApp('Desktop/Assignments/info201-finalproject')
library("dplyr")
library("snakecase")
library("plotly")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
<<<<<<< HEAD
summarise(winrate.red = (sum(rResult) / n()) * 100) %>%
=======
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
function.test <- winrate.by.role("Middle")
function.test
View(function.test)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n()) * 100), 2) %>%
=======
getwd()
setwd("~/Desktop/Assignments/info201-finalproject/")
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
arrange_(red.role) %>%
select(player = red.role, winrate.red)
library("dplyr")
library("snakecase")
library("plotly")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
<<<<<<< HEAD
summarise(winrate.red = round((sum(rResult) / n()) * 100), 2) %>%
=======
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
function.test <- winrate.by.role("Middle")
VIew(function.test)
View(function.test)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n()) * 100), 4) %>%
=======
library("dplyr")
library("snakecase")
library("plotly")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
<<<<<<< HEAD
summarise(winrate.red = round((sum(rResult) / n()) * 100), 4) %>%
=======
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
function.test <- winrate.by.role("Middle")
View(function.test)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrate.by.role <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n()) * 100), digits = 2) %>%
=======
library("dplyr")
library("stringr")
library("plotly")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
<<<<<<< HEAD
summarise(winrate.red = round((sum(rResult) / n()) * 100), digits = 2) %>%
=======
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
>>>>>>> feature/player-win-rates
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
function.test <- winrate.by.role("Middle")
View(function.test)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrate.by.role <- function(role) {
=======
View(minRateRole("Middle"))
View(winrateRole("Middle"))
runApp()
install.packages("plotly")
install.packages("plotly")
library("dplyr")
library("plotly")
source("scripts/win-rate-comparison.R")
shinyServer <- function(input, output) {
# All of this is for the win rate tab
output$firstdropdown <- renderUI({
selectizeInput("player1", label = "Choose Player 1:", choices = winrateRole(input$role)$player,
selected = NULL, multiple = FALSE, options = NULL)
})
output$seconddropdown <- renderUI({
all.choices <- winrateRole(input$role)$player
without.player1 <- all.choices[which(all.choices != input$player1)]
selectizeInput("player2", label = "Choose Player 2:", choices = without.player1,
selected = NULL, multiple = FALSE, options = NULL)
})
output$winrateplot <- renderPlotly({
tmp <- winrateRole(input$role)
players <- c(input$player1, input$player2)
tmp <- tmp %>%
filter(player %in% players) %>%
select(Player = player, Blue = winrate.blue, Red = winrate.red)
winrates <- c(tmp$Blue, tmp$Red)
plot_ly(data = tmp, x = ~Player, y = ~Blue, type = 'bar', name = "Blue side") %>%
add_trace(y = ~Red, name = "Red side") %>%
layout(title = paste0(input$player1, " vs ", input$player2, " Winrate Comparison"),
yaxis = list(title = "Winrate"), barmode = 'stack')
})
}
library("shiny")
library("shinythemes")
library("plotly")
shinyUI <- fluidPage(title = "League Analysis", theme = shinytheme("spacelab"),
mainPanel(
navbarPage(strong("League of Legends"),
tabPanel("Overview"),
tabPanel("Player Win Rates",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "role",
label = "Choose a role:",
choice = c("Top", "Jungle","Middle", "ADC", "Support",
selected = "Middle")),
uiOutput("firstdropdown"),
uiOutput("seconddropdown")
),
mainPanel(
plotlyOutput("winrateplot")
)
)
),
tabPanel("Sid"),
tabPanel("Sid&Aman"),
tabPanel("Contact us- Mahir"))
)
)
library("dplyr")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
>>>>>>> feature/player-win-rates
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
function.test <- winrate.by.role("Middle")
View(test.functin)
View(test.function)
View(function.test)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
winrate.by.role <- function(role) {
=======
runApp()
runApp()
runApp()
runApp()
library("dplyr")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
View(league.data)
runApp()
runApp()
runApp()
runApp()
highest.combined.winrate <- with(winrateRole(input$role), pmax(winrate.blue + winrate.red))
highest.combined.winrate <- with(winrateRole("Middle"), pmax(winrate.blue + winrate.red))
highest.combined.winrate
library("dplyr")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
>>>>>>> feature/player-win-rates
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
function.test <- winrate.by.role("Jungle")
View(function.test)
library("dplyr")
library("snakecase")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# Use a user-defined function to get a dataframe which has all player names by role
#
#
# blue.mid <- data.frame(league.data$blueMiddle) %>%
#   select(mid = league.data.blueMiddle)
# red.mid <- data.frame(league.data$redMiddle) %>%
#   select(mid = league.data.redMiddle)
# Issue, these player names are all lowercase (had to do that otherwise unique() would not filter out everything)
# Should I titleCase() everything?
# mid.players <- unique(rbind(blue.mid, red.mid)) # a dataframe with one column, mid, which has all midlaners's name (for search bar)
# returns a dataframe which has all players by role, and their winrates at both the blue side and the red side.
=======
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role) %>%
filter(players %in% player) %>%
filter_(side == max(get(side)))
return(tmp)
}
View(higherWinrate("Faker", "Bjergsen", "Middle", "blue"))
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role) %>%
filter(players %in% player) %>%
filter_(side == max(get(side)))
return(tmp)
}
higherWinrate("Faker", "Crown", "Middle", "blue")
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role) %>%
filter(players %in% player)
return(tmp)
}
higherWinrate("Faker", "Crown", "Middle", "blue")
higherWinrate("Faker", "Crown", "Middle", "blue")
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role)
return(tmp)
}
higherWinrate("Faker", "Crown", "Middle", "blue")
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role) %>%
filter(player == "Faker")
return(tmp)
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role) %>%
filter(player == "Faker")
return(tmp)
}
library("dplyr")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
>>>>>>> feature/player-win-rates
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
<<<<<<< HEAD
# Testing the winrate.by.role function for Mid lane ->
winrates.top <- winrateRole("Top")
winrates.jungle <- winrateRole("Jungle")
winrates.mid <- winrateRole("Middle")
winrates.adc <- winrateRole("ADC")
winrates.support <- winrateRole("Support")
View(winrates.adc)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library("shiny")
library("dplyr")
library("plotly")
source("scripts/win-rate-comparison.R")
shinyServer <- function(input, output) {
# All of this is for the win rate tab
output$firstdropdown <- renderUI({
selectizeInput("player1", label = "Choose Player 1:", choices = winrateRole(input$role)$player,
selected = NULL, multiple = FALSE, options = NULL)
})
output$seconddropdown <- renderUI({
all.choices <- winrateRole(input$role)$player
without.player1 <- all.choices[which(all.choices != input$player1)]
selectizeInput("player2", label = "Choose Player 2:", choices = without.player1,
selected = NULL, multiple = FALSE, options = NULL)
})
output$winrateplot <- renderPlotly({
tmp <- winrateRole(input$role)
players <- c(input$player1, input$player2)
tmp <- tmp %>%
filter(player %in% players) %>%
select(Player = player, Blue = winrate.blue, Red = winrate.red)
winrates <- c(tmp$Blue, tmp$Red)
plot_ly(data = tmp, x = ~Player, y = ~Blue, type = 'bar', name = "Blue side") %>%
add_trace(y = ~Red, name = "Red side") %>%
layout(title = paste0(input$player1, " vs ", input$player2, " Winrate Comparison"),
yaxis = list(title = "Winrate"), barmode = 'stack')
})
runApp()
runApp()
runApp()
=======
higherWinrate <- function(player1, player2, role, side) {
side <- paste0("winrate.", side)
players <- c(player1, player2)
tmp <- winrateRole(role) %>%
filter(player == "Faker")
return(tmp)
}
View
>>>>>>> feature/player-win-rates
