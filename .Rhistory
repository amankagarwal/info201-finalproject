Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
cor1.data <- as.matrix(comp.data)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- unlist(lapply(strsplit(comp.data$bTowers, ","), length))
comp.data$bDragons <- unlist(lapply(strsplit(comp.data$bDragons, ","), length))
comp.data$bInhibs <- unlist(lapply(strsplit(comp.data$bInhibs, ","), length))
comp.data$rTowers <- unlist(lapply(strsplit(comp.data$rTowers, ","), length))
comp.data$rDragons <- unlist(lapply(strsplit(comp.data$rDragons, ","), length))
comp.data$rInhibs <- unlist(lapply(strsplit(comp.data$rInhibs, ","), length))
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
View(comp.data)
cor1.data <- as.matrix(comp.data)
View(cor1.data)
cor1 <- cor(cor1.data)
cor.data <- data %>%
select("Tower1" = t1_towerKills,"Inhib1" = t1_inhibitorKills, "Drag1" = t1_dragonKills,
"Baron1" = t1_baronKills, "Tower2" = t2_towerKills, "Inhib2" = t2_inhibitorKills,
"Drag2" = t2_dragonKills,"Baron2" = t2_baronKills, "Winner" = winner)
cor.data <- as.matrix(cor.data)
View(cor.data)
cor <- cor(cor.data)
cor1 <- cor(cor1.data)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
cor1.data <- as.matrix(comp.data)
cor1 <- cor(cor1.data)
corrplot.mixed(cor1, "Competitive games correlations")
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
# 1 for blue win, 0 for red win
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
sapply(comp.data, is.numeric)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data <- comp.data %>%
select(Winner = as.numeric(bResult), Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(bResult)
# 1 for blue win, 0 for red win
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# 1 for blue win, 0 for red win
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
sapply(comp.data, is.numeric)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# 1 for blue win, 0 for red win
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
cor1.data <- as.matrix(comp.data)
cor1 <- cor(cor1.data)
corrplot.mixed(cor1, "Competitive games correlations")
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# 1 for blue win, 0 for red win
comp.data <- comp.data %>%
select(Winner = bResult, Tower1 = bTowers, Dragon1 = bDragons, Inhib1 = bInhibs,
Tower2 = rTowers, Dragon2 = rDragons, Inhib2 = rInhibs)
cor1.data <- as.matrix(comp.data)
cor1 <- cor(cor1.data)
corrplot.mixed(cor1, title = "Competitive games correlations")
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
View(comp.data)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bBarons <- as.numeric(unlist(lapply(strsplit(comp.data$bBarons, ","), length)))
comp.data$rBarons <- as.numeric(unlist(lapply(strsplit(comp.data$rBarons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# 1 for blue win, 0 for red win
comp.data <- comp.data %>%
select(Tower1 = bTowers, Inhib1 = bInhibs, Drag1 = bDragons, Baron1 = bBarons,
Tower2 = rTowers, Inhib2 = rInhibs, Drag2 = rDragons, Baron2 = rBarons, Winner = bResult)
cor1.data <- as.matrix(comp.data)
cor1 <- cor(cor1.data)
corrplot.mixed(cor1, title = "Competitive games correlations")
cor.data <- data %>%
select("Tower1" = t1_towerKills,"Inhib1" = t1_inhibitorKills, "Drag1" = t1_dragonKills,
"Baron1" = t1_baronKills, "Tower2" = t2_towerKills, "Inhib2" = t2_inhibitorKills,
"Drag2" = t2_dragonKills,"Baron2" = t2_baronKills, "Winner" = winner)
cor.data <- as.matrix(cor.data)
cor <- cor(cor.data)
corrplot.mixed(cor, title = "Correlation between objectives and game outcome")
comp.data <- comp.data %>%
select(Tower1 = bTowers, Inhib1 = bInhibs, Drag1 = bDragons, Baron1 = bBarons,
Tower2 = rTowers, Inhib2 = rInhibs, Drag2 = rDragons, Baron2 = rBarons, Winner = bResult)
cor1.data <- as.matrix(comp.data)
cor1 <- cor(cor1.data)
corrplot.mixed(cor1, title = "Competitive games correlations")
# This is for the non-competitive data. I wish to compare this with the competitive data.
cor.data <- data %>%
select("Tower1" = t1_towerKills,"Inhib1" = t1_inhibitorKills, "Drag1" = t1_dragonKills,
"Baron1" = t1_baronKills, "Tower2" = t2_towerKills, "Inhib2" = t2_inhibitorKills,
"Drag2" = t2_dragonKills,"Baron2" = t2_baronKills, "Winner" = winner)
cor.data <- as.matrix(cor.data)
cor <- cor(cor.data)
corrplot.mixed(cor, title = "Correlation between objectives and game outcome")
library("corrplot")
library("dplyr")
data <- read.csv("data/games.csv", stringsAsFactors = FALSE)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
# Data-wrangling: replacing the lists with the length to generate the correlation plot.
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bBarons <- as.numeric(unlist(lapply(strsplit(comp.data$bBarons, ","), length)))
comp.data$rBarons <- as.numeric(unlist(lapply(strsplit(comp.data$rBarons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# Generating a correlation plot for competitive games.
cor1.data <- comp.data %>%
select(Tower1 = bTowers, Inhib1 = bInhibs, Drag1 = bDragons, Baron1 = bBarons,
Tower2 = rTowers, Inhib2 = rInhibs, Drag2 = rDragons, Baron2 = rBarons, Winner = bResult)
cor1.data <- as.matrix(cor1.data)
cor1 <- cor(cor1.data)
competitive.corr <- corrplot.mixed(cor1, title = "Competitive Game's Correlations")
# Generating a correlation plot for non-competitive games.
cor2.data <- data %>%
select("Tower1" = t1_towerKills,"Inhib1" = t1_inhibitorKills, "Drag1" = t1_dragonKills,
"Baron1" = t1_baronKills, "Tower2" = t2_towerKills, "Inhib2" = t2_inhibitorKills,
"Drag2" = t2_dragonKills,"Baron2" = t2_baronKills, "Winner" = winner)
cor2.data <- as.matrix(cor2.data)
cor2 <- cor(cor2.data)
non.competitive.corr <- corrplot.mixed(cor2, title = "Non-Competitive Game's Correlations")
competitive.corr
non.competitive.corr
runApp()
library("dplyr")
library("plotly")
source("scripts/win-rate-comparison.R")
source("scripts/championAnalysis.R")
source("scripts/correlation.R")
shinyServer <- function(input, output) {
# Creates the first drop down menu through which the user can select the first player.
output$firstdropdown <- renderUI({
selectizeInput("player1", label = "Choose Player 1:", choices = winrateRole(input$role)$player,
selected = NULL, multiple = FALSE, options = NULL)
})
# Creates the second drop down menu. User cannot select the same player he/she select as the first player.
output$seconddropdown <- renderUI({
choice <- winrateRole(input$role)$player
selectizeInput("player2", label = "Choose Player 2:", choices = choice,
selected = choice[[2]], multiple = FALSE, options = NULL)
})
# Creates the third dropdown menu for champion 1
output$thirddropdown<- renderUI({
selectizeInput("champ1", label = "Choose Champion 1:", choices = championRole(input$role1),
selected = NULL, multiple = FALSE, options = NULL)
})
# Creates the fourth dropdown menu for champion 1
output$fourthdropdown <- renderUI({
choice <- championRole(input$role1)
selectizeInput("champ2", label = "Choose Champion 2:", choices = choice,
selected = choice[[2]], multiple = FALSE, options = NULL)
})
# Generates the winrate plot of the 2 champions based on their roles
output$winplot <- renderPlotly({
plotTheWinData(input$champ1, input$champ2, input$role1)
})
# Generates the banrate plot of the 2 champions
output$banplot <- renderPlotly({
plotTheBanData(input$champ1, input$champ2)
})
# Generates the plot of two pro player's win rate on both the red side and the blue side.
output$winrateplot <- renderPlotly({
makePlot(input$role, input$player1, input$player2)
})
# Generates a correlation matrix plot of competitive games.
output$compplot <- renderPlot({
compPlot()
})
# Generates a correlation matrix plot of non-competitive games.
output$noncompplot <- renderPlot({
nonCompPlot()
})
}
runApp()
library("corrplot")
library("dplyr")
data <- read.csv("data/games.csv", stringsAsFactors = FALSE)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
# Data-wrangling: replacing the lists with the length to generate the correlation plot.
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bBarons <- as.numeric(unlist(lapply(strsplit(comp.data$bBarons, ","), length)))
comp.data$rBarons <- as.numeric(unlist(lapply(strsplit(comp.data$rBarons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# Generating a correlation plot for competitive games.
compPlot <- function() {
cor1.data <- comp.data %>%
select(Tower1 = bTowers, Inhib1 = bInhibs, Drag1 = bDragons, Baron1 = bBarons,
Tower2 = rTowers, Inhib2 = rInhibs, Drag2 = rDragons, Baron2 = rBarons, Winner = bResult)
cor1.data <- as.matrix(cor1.data)
cor1 <- cor(cor1.data)
return(corrplot.mixed(cor1))
}
# Generating a correlation plot for non-competitive games.
nonCompPlot <- function() {
cor2.data <- data %>%
select("Tower1" = t1_towerKills,"Inhib1" = t1_inhibitorKills, "Drag1" = t1_dragonKills,
"Baron1" = t1_baronKills, "Tower2" = t2_towerKills, "Inhib2" = t2_inhibitorKills,
"Drag2" = t2_dragonKills,"Baron2" = t2_baronKills, "Winner" = winner)
cor2.data <- as.matrix(cor2.data)
cor2 <- cor(cor2.data)
return (corrplot.mixed(cor2))
}
runApp()
runApp()
runApp()
library("corrplot")
library("dplyr")
data <- read.csv("data/games.csv", stringsAsFactors = FALSE)
comp.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\[", "", x)), stringsAsFactors = F)
comp.data <- data.frame(apply(comp.data,2,function(x) gsub(pattern = "\\]", "", x)), stringsAsFactors = F)
# Data-wrangling: replacing the lists with the length to generate the correlation plot.
comp.data$bTowers <- as.numeric(unlist(lapply(strsplit(comp.data$bTowers, ","), length)))
comp.data$bDragons <- as.numeric(unlist(lapply(strsplit(comp.data$bDragons, ","), length)))
comp.data$bBarons <- as.numeric(unlist(lapply(strsplit(comp.data$bBarons, ","), length)))
comp.data$rBarons <- as.numeric(unlist(lapply(strsplit(comp.data$rBarons, ","), length)))
comp.data$bInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$bInhibs, ","), length)))
comp.data$rTowers <- as.numeric(unlist(lapply(strsplit(comp.data$rTowers, ","), length)))
comp.data$rDragons <- as.numeric(unlist(lapply(strsplit(comp.data$rDragons, ","), length)))
comp.data$rInhibs <- as.numeric(unlist(lapply(strsplit(comp.data$rInhibs, ","), length)))
comp.data$bResult <- as.numeric(comp.data$bResult)
# Generating a correlation plot for competitive games.
compPlot <- function() {
cor1.data <- comp.data %>%
select(Tower1 = bTowers, Inhib1 = bInhibs, Drag1 = bDragons, Baron1 = bBarons,
Tower2 = rTowers, Inhib2 = rInhibs, Drag2 = rDragons, Baron2 = rBarons, Winner = bResult)
cor1.data <- as.matrix(cor1.data)
cor1 <- cor(cor1.data)
return(corrplot.mixed(cor1))
}
# Generating a correlation plot for non-competitive games.
nonCompPlot <- function() {
cor2.data <- data %>%
select("Tower1" = t1_towerKills,"Inhib1" = t1_inhibitorKills, "Drag1" = t1_dragonKills,
"Baron1" = t1_baronKills, "Tower2" = t2_towerKills, "Inhib2" = t2_inhibitorKills,
"Drag2" = t2_dragonKills,"Baron2" = t2_baronKills, "Winner" = winner)
cor2.data <- as.matrix(cor2.data)
cor2 <- cor(cor2.data)
return (corrplot.mixed(cor2))
}
correlationBrief <- function() {
return ("We plan to find what objectives affect the outcome of the game the most. Also, we use correlation matrices to compare
the different correlations and try to know the difference between a competitive game and a normal game.")
}
textNonComp <- function() {
return("From this plot, we can observe that there is decent correlation between winning the games and getting
objectives such as towers, and inhibitors. However, there is one interesting observation. The correlation
of winning a game and getting a baron is lower as compared to the correlation with getting Dragons. This
is indeed surprising because baron is the strongest objective in the game, and usually can turn the tide towards
a team.")
}
textComp <- function() {
return ("Just like the correlation matrix plot for the non-competitive games, we can observe a strong correlation between winning
games and getting objectives such as towers and inhibitors. However, there is one major difference which we can observe-
the correlation between winning and getting baron is much higher, and similar to getting dragons. This is more consistent
with the logic of the game. Moreover, in competitive games all teams and players play much more seriously and focus to get
objectives in the game to win. Once a team gets baron, which is the strongest objective in the game, it's less likely that
they will throw away the lead, thus the higher correlation.")
}
runApp()
runApp()
library("dplyr")
library("stringr")
# This data has all player names (lane-wise), and whether the team has won or not.
league.data <- read.csv("data/_LeagueofLegends.csv", stringsAsFactors = FALSE)
# Making everything title case in the dataset so that there are no duplicates based on case.
league.data <- league.data %>%
mutate_if(is.character, funs(str_to_title(.)))
# This function groups the data by the role specified, and calculates the win rate for each player
# both at the blue side and the red side.
winrateRole <- function(role) {
blue.role <- paste0("blue", role)
blue <- league.data %>%
group_by_(blue.role) %>%
summarise(winrate.blue = round((sum(bResult) / n() * 100), digits = 2)) %>%
arrange_(blue.role) %>%
select(player = blue.role, winrate.blue)
red.role <- paste0("red", role)
red <- league.data %>%
group_by_(red.role) %>%
summarise(winrate.red = round((sum(rResult) / n() * 100), digits = 2)) %>%
arrange_(red.role) %>%
select(player = red.role, winrate.red)
return (left_join(blue, red))
}
champPlayRateBlue <- function(role) {
blue.role <- paste0("blue", role)
blue.champ <- paste0("blue", role, "Champ")
blue <- league.data %>%
group_by_(blue.role, blue.champ) %>%
summarise(games.played = n()) %>%
arrange_(blue.role, blue.champ) %>%
select(player = blue.role, champion = blue.champ, games.played)
return (blue)
}
champPlayRateRed <- function(role) {
red.role <- paste0("red", role)
red.champ <- paste0("red", role, "Champ")
red <- league.data %>%
group_by_(red.role, red.champ) %>%
summarise(games.played = n()) %>%
arrange_(red.role, red.champ) %>%
select(player = red.role, champion = red.champ, games.played)
return(red)
}
playratePlot <- function(role, player1, player2) {
}
# This function makes a stacked bar plot of two selected players and their respective win rates on
# the red and blue sides.
winratePlot <- function(role, player1, player2) {
tmp <- winrateRole(role)
players <- c(player1, player2)
tmp <- tmp %>%
filter(player %in% players) %>%
select(Player = player, Blue = winrate.blue, Red = winrate.red)
plot <- plot_ly(data = tmp, x = ~Player, y = ~Blue, type = 'bar', name = "Blue side", height = "600px") %>%
add_trace(y = ~Red, name = "Red side") %>%
layout(title = paste0(player1, " vs ", player2, " Winrate Comparison"),
yaxis = list(title = "Winrate"), barmode = 'stack')
return (plot)
}
playerTabOverview <- function() {
return ("In this tab, we calculate the win-rates of all players who have played competitive league of legends games between
2015 and 2017. From the dropdown menus on the left, the user can select the two players whose's win-rate he/she wants
to compare. Also, we compare the champions the selected players have played on the basis of the number
of games played on each champion.")
}
winratePlotDesc <- function() {
return("This plot compares the win-rates for the two selected players. Also, the use of a stacked bar plot enables us to compare
the win-rates for each player on the basis of the side they play on- blue or red.")
}
playratePlotDesc <- function() {
return("Write description for the second plot as well.")
}
View(champPlayRateBlue("Middle"))
View(champPlayRateRed("Middle"))
player < c("Ace", "Ace", "Ace", "Ace")
champ <- c("Azir", "Kassadin", "Xerath", "Zed")
games.played <- c(1, 2, 1, 1)
d1 <- data.frame(player, champ, games.played)
player <- c("Ace", "Ace", "Ace", "Ace")
champ <- c("Azir", "Kassadin", "Xerath", "Zed")
games.played <- c(1, 2, 1, 1)
d1 <- data.frame(player, champ, games.played)
View(d1)
player <- c("Ace", "Ace", "Ace", "Ace")
champ <- c("Azir", "Kassadin", "Xerath", "Zed")
games.played <- c(1, 2, 1, 1)
d1 <- data.frame(player, champ, games.played)
player <- c("Ace", "Ace", "Ace", "Ace")
champ <- c("Chogath", "Karthus", "Victor", "Xerath")
games.played <- c(1, 1, 1, 2)
d2 <- data.frame(player, champ, games.played)
View(d2)
View(rbind(d1, d2))
test <- bind_rows(d1, d2) %>%
group_by(player, champ) %>%
summarise(games.played = sum(games.played))
View(aggregate(games.played~., rbind(d1, d2), sum))
test <- aggregate(games.played~., rbind(d1, d2), sum)
View(test)
test.actual <- aggregate(games.played~., rbind(champPlayRateBlue("Middle"), champPlayRateRed("Middle")), sum)
View(test.actual)
champPlayRate <- function(role) {
blue.role <- paste0("blue", role)
blue.champ <- paste0("blue", role, "Champ")
blue <- league.data %>%
group_by_(blue.role, blue.champ) %>%
summarise(games.played = n()) %>%
arrange_(blue.role, blue.champ) %>%
select(player = blue.role, champion = blue.champ, games.played)
red.role <- paste0("red", role)
red.champ <- paste0("red", role, "Champ")
red <- league.data %>%
group_by_(red.role, red.champ) %>%
summarise(games.played = n()) %>%
arrange_(red.role, red.champ) %>%
select(player = red.role, champion = red.champ, games.played)
return(aggregate(games.played~., rbind(blue, red, sum)))
}
View(champPlayRate("Middle"))
champPlayRate <- function(role) {
blue.role <- paste0("blue", role)
blue.champ <- paste0("blue", role, "Champ")
blue <- league.data %>%
group_by_(blue.role, blue.champ) %>%
summarise(games.played = n()) %>%
arrange_(blue.role, blue.champ) %>%
select(player = blue.role, champion = blue.champ, games.played)
red.role <- paste0("red", role)
red.champ <- paste0("red", role, "Champ")
red <- league.data %>%
group_by_(red.role, red.champ) %>%
summarise(games.played = n()) %>%
arrange_(red.role, red.champ) %>%
select(player = red.role, champion = red.champ, games.played)
ret
champPlayRate <- function(role) {
blue.role <- paste0("blue", role)
blue.champ <- paste0("blue", role, "Champ")
blue <- league.data %>%
group_by_(blue.role, blue.champ) %>%
summarise(games.played = n()) %>%
arrange_(blue.role, blue.champ) %>%
select(player = blue.role, champion = blue.champ, games.played)
red.role <- paste0("red", role)
red.champ <- paste0("red", role, "Champ")
red <- league.data %>%
group_by_(red.role, red.champ) %>%
summarise(games.played = n()) %>%
arrange_(red.role, red.champ) %>%
select(player = red.role, champion = red.champ, games.played)
return(aggregate(games.played~., rbind(blue, red), sum))
}
View(champPlayRate("Middle"))
